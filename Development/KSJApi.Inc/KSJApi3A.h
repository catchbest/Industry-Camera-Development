#ifndef __KSJ_API_3A_H__
#define __KSJ_API_3A_H__

// #pragma message("Include KSJApi3A.h") 

#ifdef KSJAPI_EXPORTS
    #define KSJ_API __declspec(dllexport)
#elif defined KSJAPI_STATIC
    #define KSJ_API
#else
    #define KSJ_API __declspec(dllimport)
#endif

#ifdef __cplusplus
extern "C"{
#endif

	//-----------------------------------------------------------------------------
    // 函数：KSJ_AESetRegion
    // 功能：设置自动曝光的参考区域，这个区域是相对预览图像的位置
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       nX：输入，相对于无缩放预览图像的左上角水平像素偏移
	//       nY：输入，相对于无缩放预览图像的左上角垂直像素偏移
	//       nW：输入，相对于无缩放预览图像的自动曝光区域的宽度以像素为单位
	//       nH：输入，相对于无缩放预览图像的自动曝光区域的高度以像素为单位
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AESetRegion(int nChannel, int nX, int nY, int nW, int nH);

	//-----------------------------------------------------------------------------
    // 函数：KSJ_AEGetRegion
    // 功能：获取自动曝光的参考区域及显示状态，这个区域是相对预览图像的位置
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pnX：输出，返回相对于无缩放预览图像的左上角水平像素偏移
	//       pnY：输出，返回相对于无缩放预览图像的左上角垂直像素偏移
	//       pnW：输出，返回相对于无缩放预览图像的自动曝光区域的宽度以像素为单位
	//       pnH：输出，返回相对于无缩放预览图像的自动曝光区域的高度以像素为单位
	//       pbShow：输出，参考区域是否显示
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AEGetRegion(int nChannel, int *pnX, int *pnY, int *pnW, int *pnH, bool *pbShow);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AEShowRegion
    // 功能：是否显示自动曝光的参考区域
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       bShow：输入，是否显示自动曝光参考区域
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AEShowRegion(int nChannel, bool bShow);

	//-----------------------------------------------------------------------------
    // 函数：KSJ_AESetPeakAveRatio
    // 功能：设置峰值比率
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       fRatio：输入，设置的峰值比率,范围0到1
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AESetPeakAveRatio(int nChannel, float fRatio);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AEGetPeakAveRatio
    // 功能：获取峰值比率
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pfRatio：输出，返回峰值比率
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AEGetPeakAveRatio(int nChannel, float *pfRatio);

	//-----------------------------------------------------------------------------
    // 函数：KSJ_AESetExposureTimeRange
    // 功能：设置自动曝光的调节范围，影响KSJ_AEStart和KSJ_AEStartEx两个函数
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       fMinExpMs：输入，设置自动曝光调节下限（ms）
	//       fMaxExpMs：输入，设置自动曝光调节上限（ms）
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AESetExposureTimeRange(int nChannel, float fMinExpMs,   float fMaxExpMs);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AEGetExposureTimeRange
    // 功能：获取自动曝光的调节范围，影响KSJ_AEStart和KSJ_AEStartEx两个函数
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pfMinExpMs：输入，返回自动曝光调节下限（ms）
	//       pfMaxExpMs：输入，返回自动曝光调节上限（ms）
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AEGetExposureTimeRange(int nChannel, float *pfMinExpMs, float *pfMaxExpMs);

	// 自动曝光返回状态
	enum KSJ_AE_STATUS 
	{ 
	KSJ_AE_ONCE_SUCCESS = 0, 			//单次调节成功
	KSJ_AE_ONCE_FAIL_MAX_COUNT, 		//单次调节失败，失败原因达到最大调节次数
	KSJ_AE_ONCE_FAIL_WAVE, 				//单次调节失败，失败原因调节上下振动
	KSJ_AE_ONCE_FAIL_OVER_RANGE, 		//单次调节失败，失败原因曝光超出设置范围
	KSJ_AE_DOING, 						//单次调节实现，曝光时间发生了变化
	KSJ_AE_CONTINUE_SUCCESS,			//连续调节成功，当前达到了目标值
	KSJ_AE_CONTINUE_FAIL_WAVE, 			//连续调节失败，失败原因调节上下振动
	KSJ_AE_CONTINUE_FAIL_OVER_RANGE 	//连续调节失败，失败原因曝光超出设置范围
	};
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AECALLBACKEX
    // 功能：定义通过KSJ_AEStartEx启动的自动曝光操作的回调函数
    // 参数：
	//       Status： 输出，当前自动曝光操作的状态（参考KSJ_AE_STATUS说明）
    //       nExpsoureTimeMs：输出，在自动曝光调节结束后，曝光值是多少（MS）
	//       lpContext：输出，用户上下文指针，这个指针是用户调用KSJ_AESetCallbackEx时传入的上下文指针
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	typedef void(__stdcall *KSJ_AECALLBACKEX)( KSJ_AE_STATUS Status, int nExpsoureTimeMs, void *lpContext);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AESetCallbackEx
    // 功能：定义通过KSJ_AEStartEx启动的自动曝光操作的回调函数，当自动曝光进行每一次调节时，KSJ开发包会自动调用pfAECallbackEx用户指定的回调函数
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pfAECallbackEx：输入，用户定义的自动曝光回调函数指针
	//       lpContext：输入，回调函数的上下文指针
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AESetCallbackEx(int nChannel, KSJ_AECALLBACKEX pfAECallbackEx, void *lpContext);

	//-----------------------------------------------------------------------------
    // 函数：KSJ_AESetMaxCount
    // 功能：设置自动曝光调节最大次数
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       nMaxCount：输入，设置自动曝光调节最大次数
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AESetMaxCount(int nChannel, int  nMaxCount);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AESetTarget
    // 功能：设置自动曝光调节目标值，影响KSJ_AEStart和KSJ_AEStartEx两个函数
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       nTarget：输入，设置自动曝光调节的目标值。所谓目标值就是调节成功后图像曝光区域所要达到的整体灰度值
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AESetTarget  (int nChannel, int  nTarget  );
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AEStartEx
    // 功能：启动或结束自动曝光操作
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       bStart：输入，TRUE 开始自动曝光调节，FALSE 终止或结束自动曝光调节
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AEStartEx    (int nChannel, bool bStart   );

	//-----------------------------------------------------------------------------
    // 函数：KSJ_AEGetStatusEx
    // 功能：得到自动曝光的设置
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pbStart：输出，得到KSJ_AEStartEx是否启动
	//       pnMaxCount：输出，得到自动曝光的最大调节次数
	//       pnTarget：输出，得到自动曝光调节的目标值
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AEGetStatusEx(int nChannel, bool *pbStart, int *pnMaxCount, int *pnTarget);

	//-----------------------------------------------------------------------------
    // 函数：KSJ_AECALLBACK
    // 功能：定义自动曝光操作结束后的回调函数
    // 参数：
	//       bSuccess： 输出，传回自动曝光操作是否调节到用户设定的目标值（参考KSJ_AEStart函数），TRUE，表示自动曝光调节到达了目标值，FALSE，表示自动曝光超过用户设定的调节次数，没有达到目标值
    //       nResult：输出，在自动曝光调节结束后，曝光值是多少（MS）
	//       lpContext：输出，用户上下文指针，这个指针是用户调用KSJ_AESetCallback时传入的上下文指针
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	typedef void(__stdcall *KSJ_AECALLBACK)(bool bSuccess, int nResult, void *lpContext);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AESetCallback
    // 功能：定义通过KSJ_AEStartEx启动的自动曝光操作的回调函数，当自动曝光进行每一次调节时，KSJ开发包会自动调用pfAECallbackEx用户指定的回调函数
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pfAECallback：输入，用户定义的自动曝光回调函数指针（参考KSJ_AECALLBACK函数的定义）
	//       lpContext：输入，回调函数的上下文指针
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AESetCallback(int nChannel, KSJ_AECALLBACK pfAECallback, void *lpContext);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AEStart
    // 功能：启动或结束自动曝光操作
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       bStart：输入，设定最多调节几次就结束。如果在用户设置的次数内曝光调节没有达到用户设定的目标值，回调函数会提示自动曝光失败
	//       nMaxCount：输入，TRUE 开始自动曝光调节，FALSE 终止或结束自动曝光调节
	//       nTarget：输入，调节到的目标亮度值（0-255）
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AEStart(int nChannel, bool bStart, int nMaxCount, int nTarget);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AWBSetRegion
    // 功能：设置自动白平衡的参考区域，这个区域是相对预览图像的位置
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       nX：输入，相对于无缩放预览图像的左上角水平像素偏移
	//       nY：输入，相对于无缩放预览图像的左上角垂直像素偏移
	//       nW：输入，相对于无缩放预览图像的自动曝光区域的宽度以像素为单位
	//       nH：输入，相对于无缩放预览图像的自动曝光区域的高度以像素为单位
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AWBSetRegion(int nChannel, int nX, int nY, int nW, int nH);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AWBShowRegion
    // 功能：是否显示自动白平衡的参考区域
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       bShow：输入，是否显示自动白平衡参考区域
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AWBShowRegion(int nChannel, bool bShow);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AWBGetRegion
    // 功能：获取自动白平衡的参考区域及显示状态，这个区域是相对预览图像的位置
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pnX：输出，返回相对于无缩放预览图像的左上角水平像素偏移
	//       pnY：输出，返回相对于无缩放预览图像的左上角垂直像素偏移
	//       pnW：输出，返回相对于无缩放预览图像的自动曝光区域的宽度以像素为单位
	//       pnH：输出，返回相对于无缩放预览图像的自动曝光区域的高度以像素为单位
	//       pbShow：输出，参考区域是否显示
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AWBGetRegion(int nChannel, int *pnX, int *pnY, int *pnW, int *pnH, bool *pbShow);

	//-----------------------------------------------------------------------------
    // 函数：KSJ_AWBCALLBACK
    // 功能：定义自动曝光操作结束后的回调函数
    // 参数：
	//       bSuccess： 输出，传回自动白平衡操作是否调节到用户设定的目标值（参考KSJ_AEStart函数），TRUE，表示自动白平衡调节到达了目标值，FALSE，表示自动白平衡超过用户设定的调节次数，没有达到目标值
    //       nValueR：输出，在自动白平衡调节结束后，红增益的设置值
	//       nValueG：输出，在自动白平衡调节结束后，绿增益的设置值
	//       nValueB：输出，在自动白平衡调节结束后，蓝增益的设置值
	//       lpContext：输出，用户上下文指针，这个指针是用户调用KSJ_AWBSetCallback时传入的上下文指针
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	typedef void(__stdcall *KSJ_AWBCALLBACK)(bool bSuccess, int nValueR, int nValueG, int nValueB, void *lpContext);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AWBSetCallback
    // 功能：定义自动白平衡操作结束后的回调函数，当自动曝光结束时，KSJ开发包会自动调用pfAWBCallback用户指定的回调函数
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       fpAWBCallback：输入，用户定义的自动白平衡回调函数指针（参考KSJ_AWBCALLBACK函数的定义）
	//       lpContext：输入，回调函数的上下文指针
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AWBSetCallback(int nChannel, KSJ_AWBCALLBACK fpAWBCallback, void *lpContext);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AWBStart
    // 功能：启动或结束自动曝光操作
    // 参数：
	//       bSuccess： 输出，传回自动白平衡操作是否调节到用户设定的目标值（参考KSJ_AEStart函数），TRUE，表示自动白平衡调节到达了目标值，FALSE，表示自动白平衡超过用户设定的调节次数，没有达到目标值
    //       bStart：输入，TRUE 开始自动白平衡调节，FALSE 终止或结束自动白平衡调节
	//       nMaxCount：输出，设定最多调节几次就结束。如果在用户设置的次数内白平衡调节没有达到用户设定的目标值，回调函数会提示自动白平衡失败
	//       nRTarget：输出，调节到的目标红分量值（0-255）
	//       nGTarget：输出，调节到的目标绿分量值（0-255）
	//       nBTarget：输出，调节到的目标蓝分量值（0-255）
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AWBStart(int nChannel, bool bStart, int nMaxCount, int nRTarget, int nGTarget, int nBTarget);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 设置聚焦评估区域
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AFSetRegion
    // 功能：设置自动聚焦评估的参考区域，这个区域是相对预览图像的位置
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       nX：输入，相对于无缩放预览图像的左上角水平像素偏移
	//       nY：输入，相对于无缩放预览图像的左上角垂直像素偏移
	//       nW：输入，相对于无缩放预览图像的自动曝光区域的宽度以像素为单位
	//       nH：输入，相对于无缩放预览图像的自动曝光区域的高度以像素为单位
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AFSetRegion(int nChannel, int nX, int nY, int nW, int nH);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AFShowRegion
    // 功能：是否显示自动聚焦的参考区域
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       bShow：输入，是否显示自动聚焦参考区域
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AFShowRegion(int nChannel, bool bShow);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AFGetRegion
    // 功能：获取自动聚焦的参考区域及显示状态，这个区域是相对预览图像的位置
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pnX：输出，返回相对于无缩放预览图像的左上角水平像素偏移
	//       pnY：输出，返回相对于无缩放预览图像的左上角垂直像素偏移
	//       pnW：输出，返回相对于无缩放预览图像的自动曝光区域的宽度以像素为单位
	//       pnH：输出，返回相对于无缩放预览图像的自动曝光区域的高度以像素为单位
	//       pbShow：输出，参考区域是否显示
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AFGetRegion(int nChannel, int *pnX, int *pnY, int *pnW, int *pnH, bool *pbShow);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AFCALLBACK
    // 功能：定义自动聚焦评估操作结束后的回调函数
    // 参数：
	//       nValue： 输出，聚焦评估值(0-10200)
	//       lpContext：输出，用户上下文指针，这个指针是用户调用KSJ_AFSetCallback时传入的上下文指针
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	typedef void(__stdcall *KSJ_AFCALLBACK)(int nValue, void *lpContext);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AFSetCallback
    // 功能：定义自动聚焦评估值计算结束后的回调函数
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       fpAFCallback：输入，用户定义的自动聚焦评估回调函数指针（参考KSJ_AFCALLBACK函数的定义）
	//       lpContext：输入，回调函数的上下文指针
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AFSetCallback(int nChannel, KSJ_AFCALLBACK fpAFCallback, void *lpContext);
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AFStart
    // 功能：开始或停止自动聚焦自动评估操作
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       bStart：输入，TRUE 开始自动聚焦评估计算，FALSE 终止或结束自动聚焦评估计算
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AFStart(int nChannel, bool bStart);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 硬件自动曝光
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AECSetEnable
    // 功能：开启或关闭AEC功能
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       bEnable：输入，true 开启AEC功能，false 关闭AEC功能
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AECSetEnable ( int nChannel, bool bEnable  );
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AECGetEnable
    // 功能：获取AEC功能是否开启
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pbEnable：输出，true AEC功能已经开启，false AEC功能已经关闭
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AECGetEnable ( int nChannel, bool *pbEnable  );

	//-----------------------------------------------------------------------------
    // 函数：KSJ_AECSetRange
    // 功能：设置AEC的调节范围
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       usMin：输入，AEC调节下限（曝光行）
	//       usMax：输入，AEC调节上限（曝光行）
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AECSetRange ( int nChannel, unsigned short usMin,  unsigned short usMax  );
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AECGetRange
    // 功能：获取AEC的调节范围
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pusMin：输出，返回AEC调节下限（曝光行）
	//       pusMax：输出，返回AEC调节上限（曝光行）
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AECGetRange ( int nChannel, unsigned short *pusMin, unsigned short *pusMax );
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AECGetCur
    // 功能：得到AEC的当前曝光行
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       usCur：输出，返回AEC当前值（曝光行）
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AECGetCur ( int nChannel, unsigned short *usCur  );

	//-----------------------------------------------------------------------------
    // 函数：KSJ_AGCSetEnable
    // 功能：开启或关闭AGC功能
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       bEnable：输入，true 开启AGC功能，false 关闭AGC功能
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AGCSetEnable ( int nChannel, bool bEnable  );
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AGCGetEnable
    // 功能：获取AGC功能是否开启
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pbEnable：输出，true  AGC功能已经开启，false  AGC功能已经关闭
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AGCGetEnable ( int nChannel, bool *pbEnable  );

	//-----------------------------------------------------------------------------
    // 函数：KSJ_AGCSetRange
    // 功能：设置AGC的调节范围
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       usMin：输入，AGC调节增益下限
	//       usMax：输入，AGC调节增益上限
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AGCSetRange ( int nChannel, unsigned short usMin,  unsigned short usMax  );
	
	//-----------------------------------------------------------------------------
    // 函数：KSJ_AGCGetRange
    // 功能：获取AGC的调节范围
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pusMin：输出，返回AGC调节增益下限
	//       pusMax：输出，返回AGC调节增益上限
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AGCGetRange ( int nChannel, unsigned short *pusMin, unsigned short *pusMax );

	//-----------------------------------------------------------------------------
    // 函数：KSJ_AGCGetCur
    // 功能：得到AGC的当前增益值
    // 参数：
	//       nChannel： 输入，设备索引（从0开始，最大索引数为:连接到主机的设备数目减一）
    //       pusCur：输出，返回AGC当前增益值
    // 返回：参考返回状态码（KSJCode.H）
    // 说明：调用KSJ_Init函数初始化后调用
	//-----------------------------------------------------------------------------
	KSJ_API  int __stdcall KSJ_AGCGetCur ( int nChannel, unsigned short *pusCur  );

#ifdef __cplusplus
}
#endif

#endif